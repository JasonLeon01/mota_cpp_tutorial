框架内部类
=========

1. SceneBase
~~~~~~~~~~~~~

场景类型的基类，所有的场景类都要是这个的子类。

2. GameImage
~~~~~~~~~~~~

Image类型，可以类比为RMXP里的 ``Sprite`` 类（虽然这个就是SFML的 ``Sprite`` 的封装）。

原理是在执行带参数构造函数或者 ``setSprite`` 后，将 ``this`` 添加到 ``motaGraphics`` 的队列当中，每次更新画面将会逐一显示，只需要调整这个对象的各参数即可。

2.1. 成员
----------

2.1.1. x, y, z
^^^^^^^^^^^^^^

``x`` 和 ``y`` 就是Image的xy坐标， ``z`` 是优先级， ``z`` 越高在屏幕上的优先级越大，显示的就越靠前。

2.1.2. origin_x, origin_y
^^^^^^^^^^^^^^^^^^^^^^^^^

设置图像的原点，默认都为0。

2.1.3. width, height, sx, sy
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

用于切割图像的参数，默认都为0， ``width`` 和 ``height`` 为0时不进行切割。

2.1.4. opacity
^^^^^^^^^^^^^^^

为图像的不透明度。

2.1.5. angle
^^^^^^^^^^^^

为图像的旋转角度。

2.1.6 visible
^^^^^^^^^^^^^^

决定一个图像是否可见，不可见时设置为 ``false`` 。

2.2. 函数
---------

2.2.1. 构造函数
^^^^^^^^^^^^^^^

2.2.1.1. GameImage()
""""""""""""""""""""

默认的构造函数，会将所有参数设置为默认值。

2.2.1.2. GameImage(file, ix, iy, iwidth, iheight, isx, isy)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

重载的构造函数，对相应的成员进行初始化。

除了 ``file`` 以外，其余参数缺省值为0。

2.2.2. setSprite(file, ix, iy, iwidth, iheight, isx, isy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

对 ``Image`` 的 ``Sprite`` 进行设置（更新），除了 ``file`` 以外，其余参数缺省值为0。

2.2.3. dispose()
^^^^^^^^^^^^^^^^

将该对象从 ``motaGraphics`` 的队列中删除，更新画面时将不再显示。

3. System -> motaSystem
~~~~~~~~~~~~~~~~~~~~~~~

本框架的系统类，用于储存各种和系统相关的数据，对应跨文件全局变量为 ``motaSystem`` 。

3.1. 成员
---------

3.1.1. window, font, bgm, scene
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``window`` 为这个游戏的窗口，一切和窗口相关的都在这里调整；

``font`` 为游戏字体，字体的设置在这里调整；

``bgm`` 为游戏BGM， ``Music`` 类型变量；

``scene`` 为设置场景的变量， ``motaSystem.scene`` 可以类比为RMXP里的 ``$scene`` 。

3.1.2. gameTime, frameRate, windowOpacity, resolutionRatio
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``gameTime`` 用以计算游戏时间，每刷新一次将会+1，一般是用来设置行走动画相关的内容；

``frameRate`` 是刷新频率，每隔若干时间会刷新一次；

``windowOpacity`` 是默认的窗口不透明度；

``resolutionRatio`` 是当前的分辨率（放大率），最低是1（即默认的640x480），最大是2（变成1280x960）。

3.1.3. BGMVolume, setVolume
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

为BGM和SE的音量。

3.1.4. xxSE
^^^^^^^^^^^^

为各种SE的文件名，具体参考 ``main.ini`` 。

3.1.5. textureCache
^^^^^^^^^^^^^^^^^^^^

为纹理的缓存，这些都会在开始游戏时缓存完成。

3.2. 函数
----------

3.2.1. init()
^^^^^^^^^^^^^^

对各种成员初始化的函数，读取系统数据也是在这里进行。

3.2.2. bgmSwitch(file)
^^^^^^^^^^^^^^^^^^^^^^^

切换BGM使用的函数。

4. GameKeyBoard -> motaKeyBoard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

关于全键盘的类，和魔塔样板的全键盘脚本相似，对应跨文件全局变量为 ``motaKeyBoard`` 。

4.1. press(key), repeat(key), trigger(key)
-------------------------------------------

这些和魔塔样板全键盘脚本的设置完全相同。

4.2. pressConfirm(), repeatConfirm(), triggerConfirm(), pressCancel(), repeatCancel(), triggerCancel()
-------------------------------------------------------------------------------------------------------

使用上述三种按法按下确认（空格和回车）和取消（Esc和X）键的判定。

4.3. doubleClick(key)
---------------------

判定是否双击的函数。

4.4. dir4()
-----------

判定四方向的函数，下左右上分别返回0,1,2,3，否则返回-1。

5. GameWindows
~~~~~~~~~~~~~~

游戏窗口的类，同理，也是在构造函数之后将 ``this`` 添加到 ``motaGraphics`` 当中。

5.1. 成员
---------

5.1.1. x, y, z, width, height, opacity, visible
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

窗口的x, y, z坐标、宽高和不透明度以及是否可见。

5.1.2. hasFunction
^^^^^^^^^^^^^^^^^^

判断是否有执行函数的变量，如果为 ``true`` ，则在显示的时候会执行里面的 ``refresh()`` 函数。

5.2. 函数
---------

5.2.1. 构造函数
^^^^^^^^^^^^^^^

5.2.1.1. GameWindow()
""""""""""""""""""""""

为默认构造函数，初始化上述成员， ``hasFunction`` 默认为 ``false`` 。

5.2.1.2. GameWindow(rect, wopacity)
""""""""""""""""""""""""""""""""""""

重载的构造函数， ``rect`` 为信息矩形，分别为xy坐标和宽高， ``opacity`` 为不透明度，缺省值窗口默认不透明度。

5.2.2. drawRect(rect)
^^^^^^^^^^^^^^^^^^^^^^

在窗口绘制选择矩形框的函数。

5.2.3. drawWText(dx, dy, content, size, bond, color) & drawWText(rect, content, pos, size, bond, color)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在窗口里面显示文字的函数，默认原点为窗口左上角坐标。

5.2.4. windowBitmap(file, dx, dy, dopacity) & windowBitmap(file, dx, dy, rect, dopacity)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在窗口显示图片的函数，默认原点为窗口左上角坐标。

5.2.5. dispose()
^^^^^^^^^^^^^^^^^

释放窗口的函数，将会把 ``this`` 从 ``motaGraphics`` 的队列中删除。

6. GameSelectWindow
~~~~~~~~~~~~~~~~~~~

处理待遇选择项窗口的类，继承自 ``GameWindow`` 。

6.1. 新增成员
-------------

``index`` ：当前的选项号，从0开始；

``rectHeight`` ：选择矩形的高度；

``active``：是否活跃的标志，为 ``false`` 时将不能通过按键调整选项；

``items`` ：选项的集合，为 ``vector<string>`` 类型。

6.2. 函数
----------

6.2.1. 构造函数
^^^^^^^^^^^^^^^

``GameSelectWindow(wwidth, rectheight, item)`` ：初始化窗口宽度、矩形高度和选择项，窗口的高度将会通过矩形高度进行计算。

6.2.2. refresh()
^^^^^^^^^^^^^^^^^

自带的 ``refresh`` 函数，会根据当前选项在对应位置绘制矩形，并读取按键调整矩形位置。

6.2.3 drawItem(idx, colour)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

绘制选项内容的函数。

7. GameGraphics -> motaGraphics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

用于承载和刷新游戏画面的类，对应跨文件全局变量为 ``motaGraphics`` 。

7.1. update(clear_device)
--------------------------

用于更新画面的类， ``clear_device`` 用于判断是否在函数开头清空画面，缺省值为 ``true`` ，因为还有 ``ScreenData`` 类会将地图画面显示在屏幕上，那里会清空一次屏幕，所以在 ``MotaMap`` 类中， ``motaGraphics`` 的 ``update`` 是不用清屏的。

7.2. dispose()
---------------

用于释放画面的类，会清空屏幕和承载的图像和窗口。

